var documenterSearchIndex = {"docs":
[{"location":"utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"cor2cor(::T, ::Symbol, ::Symbol) where {T <: Real}\ncor2cor(::AbstractMatrix{T}, ::Symbol, ::Symbol) where {T <: Real}\ncov2cor(::AbstractArray)\nhermite(x, ::Int, ::Bool=true)\nrcor(::Integer, α::Real=1.0)\nMvSim.setdiag(A::AbstractMatrix{T}, x::S) where {T<:Real, S<:Real}\nMvSim.z2x(d::UnivariateDistribution, x::AbstractArray)","category":"page"},{"location":"utilities/#MvSim.cor2cor-Union{Tuple{T}, Tuple{T,Symbol,Symbol}} where T<:Real","page":"Utilities","title":"MvSim.cor2cor","text":"cor2cor(ρ::T, from::Symbol, to::Symbol) where {T <: Real}\n\nConvert from one type of correlation matrix to another. The possible correlation types are Pearson (:P), Spearman (:S), or Kendall (:K). If an invalid pair is given, throw an error.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#MvSim.cor2cor-Union{Tuple{T}, Tuple{AbstractArray{T,2},Symbol,Symbol}} where T<:Real","page":"Utilities","title":"MvSim.cor2cor","text":"cor2cor(A::AbstractMatrix{T}, from::Symbol, to::Symbol) where {T <: Real}\n\nConvert from one type of correlation matrix to another. The possible correlation types are Pearson (:P), Spearman (:S), or Kendall (:K). If an invalid pair is given, throw an error.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#MvSim.cov2cor-Tuple{AbstractArray}","page":"Utilities","title":"MvSim.cov2cor","text":"cov2cor(Σ::AbstractArray)\n\nConvert a covariance matrix to a correlation matrix. Ensure that the resulting matrix is symmetric and has diagonals equal to 1.0.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#MvSim.hermite","page":"Utilities","title":"MvSim.hermite","text":"hermite(x, n::Int, probabilists::Bool=true)\n\nCompute the Hermite polynomials of degree n. Compute the Probabilists' version by default.\n\nThe two definitions of the Hermite polynomials are each a rescaling of the other. Let Heₙ(x) denote the Probabilists' version, and Hₙ(x) the Physicists'. Then\n\nH_n(x) = 2^fracn2 He_nleft(sqrt2 xright)\n\nHe_n(x) = 2^-fracn2 H_nleft(fracxsqrt2right)\n\n\n\n\n\n","category":"function"},{"location":"utilities/#MvSim.rcor","page":"Utilities","title":"MvSim.rcor","text":"rcor(d::Integer, α::Real=1.0)\n\nGenerate a random positive definite correlation matrix of size dd. The parameter α is used to determine the autocorrelation in the correlation coefficients.\n\nReference\n\nJoe H (2006). Generating random correlation matrices based on partial correlations. J. Mult. Anal. Vol. 97, 2177–2189.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#MvSim.setdiag-Union{Tuple{S}, Tuple{T}, Tuple{AbstractArray{T,2},S}} where S<:Real where T<:Real","page":"Utilities","title":"MvSim.setdiag","text":"setdiag(A::AbstractMatrix{T}, x::S) where {T<:Real, S<:Real}\n\nSet the diagonal elements of an AbstractMatrix to a value. Return the new matrix.\n\n\n\n\n\n","category":"method"},{"location":"utilities/#MvSim.z2x-Tuple{Distribution{Univariate,S} where S<:ValueSupport,AbstractArray}","page":"Utilities","title":"MvSim.z2x","text":"z2x(d::UnivariateDistribution, x::AbstractArray)\n\nConvert samples from a standard normal distribution to a given marginal distribution.\n\n\n\n\n\n","category":"method"},{"location":"#MvSim.jl-Documentation","page":"MvSim.jl Documentation","title":"MvSim.jl Documentation","text":"","category":"section"},{"location":"","page":"MvSim.jl Documentation","title":"MvSim.jl Documentation","text":"Pages = [\"main_functions.md\", \"utilities.md\"]","category":"page"},{"location":"#Index","page":"MvSim.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"MvSim.jl Documentation","title":"MvSim.jl Documentation","text":"","category":"page"},{"location":"main_functions/#Main-Functions","page":"Main Functions","title":"Main Functions","text":"","category":"section"},{"location":"main_functions/#Nearest-Correlation-Matrix","page":"Main Functions","title":"Nearest Correlation Matrix","text":"","category":"section"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"nearestPSDcor(R)","category":"page"},{"location":"main_functions/#MvSim.nearestPSDcor-Tuple{Any}","page":"Main Functions","title":"MvSim.nearestPSDcor","text":"nearestPSDcor(R;\n    τ::Real=1e-5,\n    iter_outer=200,\n    iter_inner=20,\n    N=200,\n    δ::Real=1e-6,\n    ϵ::Real=1e-2,\n    σ::Real=1e-4)\n\nCompute the nearest positive semidefinite correlation matrix given a symmetric correlation matrix R. This algorithm is based off of work by Qi and Sun 2006. Matlab, C, R, and Python code can be found on Sun's page. The algorithm has also been implemented in Fortran in the NAG library.\n\nArguments\n\nτ::Real: a [small] nonnegative number used to enforce a minimum eigenvalue.\nδ::Real: the error tolerance for the stopping condition.\n\nExamples\n\nimport LinearAlgebra: eigvals\n# Define a negative definite correlation matrix\nρ = [1.00 0.82 0.56 0.44\n     0.82 1.00 0.28 0.85\n     0.56 0.28 1.00 0.22\n     0.44 0.85 0.22 1.00]\neigvals(ρ)\n\nr = nearestPSDcor(ρ)\neigvals(r)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#Utilities","page":"Main Functions","title":"Utilities","text":"","category":"section"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"MvSim.gradient(y, λ₀, P, b₀)\nMvSim.PCA(X, λ, P)\nMvSim.pre_cg(b, c, Ω₀, P, ϵ, N)\nMvSim.precond_matrix(Ω₀, P)\nMvSim.set_omega(λ)\nMvSim.jacobian(x, Ω₀, P; PERTURBATION=1e-9)","category":"page"},{"location":"main_functions/#MvSim.gradient-NTuple{4,Any}","page":"Main Functions","title":"MvSim.gradient","text":"gradient(y, λ₀, P, b₀)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.PCA-Tuple{Any,Any,Any}","page":"Main Functions","title":"MvSim.PCA","text":"PCA(X, λ, P)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.pre_cg-NTuple{6,Any}","page":"Main Functions","title":"MvSim.pre_cg","text":"pre_cg(b, c, Ω₀, P, ϵ, N)\n\nPre- Conjugate Gradient method.\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.precond_matrix-Tuple{Any,Any}","page":"Main Functions","title":"MvSim.precond_matrix","text":"precond_matrix(Ω₀, P)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.set_omega-Tuple{Any}","page":"Main Functions","title":"MvSim.set_omega","text":"set_omega(λ)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.jacobian-Tuple{Any,Any,Any}","page":"Main Functions","title":"MvSim.jacobian","text":"jacobian(x, Ω₀, P; PERTURBATION=1e-9)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#Pearson-Matching","page":"Main Functions","title":"Pearson Matching","text":"","category":"section"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"Continuous","category":"page"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"ρz(ρx, dA::ContinuousUnivariateDistribution, dB::ContinuousUnivariateDistribution, μA, μB, σA, σB, n::Int=3)\nρz(ρx, dA::ContinuousUnivariateDistribution, dB::ContinuousUnivariateDistribution, n::Int=3)","category":"page"},{"location":"main_functions/#MvSim.ρz","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::ContinuousUnivariateDistribution, dB::ContinuousUnivariateDistribution, μA, μB, σA, σB, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two continuous univariate distributions and the desired correlation coefficient ρx.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/#MvSim.ρz-2","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::ContinuousUnivariateDistribution, dB::ContinuousUnivariateDistribution, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two continuous univariate distributions and the desired correlation coefficient ρx. Calculate the mean and variance for each distribution.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"Discrete","category":"page"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"ρz(ρx, dA::DiscreteUnivariateDistribution, dB::DiscreteUnivariateDistribution, σA, σB, minA, minB, maxA, maxB, n::Int=3)\nρz(ρx, dA::DiscreteUnivariateDistribution, dB::DiscreteUnivariateDistribution, n::Int=3)","category":"page"},{"location":"main_functions/#MvSim.ρz-3","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::DiscreteUnivariateDistribution, dB::DiscreteUnivariateDistribution, σA, σB, minA, minB, maxA, maxB, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two discrete univariate distributions and the desired correlation coefficient ρx.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/#MvSim.ρz-4","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::DiscreteUnivariateDistribution, dB::DiscreteUnivariateDistribution, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two discrete univariate distributions and the desired correlation coefficient ρx. Calculate the variance, minimum, and maximum for each distribution.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"Mixed","category":"page"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"ρz(ρx, dA::DiscreteUnivariateDistribution, dB::ContinuousUnivariateDistribution, σA, σB, minA, maxA, n::Int=3)\nρz(ρx, dA::DiscreteUnivariateDistribution, dB::ContinuousUnivariateDistribution, n::Int=3)\nρz(ρx, dA::ContinuousUnivariateDistribution, dB::DiscreteUnivariateDistribution, σA, σB, minB, maxB, n::Int=3)\nρz(ρx, dA::ContinuousUnivariateDistribution, dB::DiscreteUnivariateDistribution, n::Int=3)","category":"page"},{"location":"main_functions/#MvSim.ρz-5","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::DiscreteUnivariateDistribution, dB::ContinuousUnivariateDistribution, σA, σB, minA, maxA, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two mixed support univariate distributions and the desired correlation coefficient ρx.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/#MvSim.ρz-6","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::DiscreteUnivariateDistribution, dB::ContinuousUnivariateDistribution, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two mixed support univariate distributions and the desired correlation coefficient ρx. Calculate the support as needed.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/#MvSim.ρz-7","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::ContinuousUnivariateDistribution, dB::DiscreteUnivariateDistribution, σA, σB, minB, maxB, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two mixed support univariate distributions and the desired correlation coefficient ρx.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/#MvSim.ρz-8","page":"Main Functions","title":"MvSim.ρz","text":"ρz(ρx, dA::ContinuousUnivariateDistribution, dB::DiscreteUnivariateDistribution, n::Int=3)\n\nEstimate the input correlation coefficient ρz given the marginal CDFs of two mixed support univariate distributions and the desired correlation coefficient ρx. Calculate the support as needed.\n\n\n\n\n\n","category":"function"},{"location":"main_functions/#Utilities-2","page":"Main Functions","title":"Utilities","text":"","category":"section"},{"location":"main_functions/","page":"Main Functions","title":"Main Functions","text":"MvSim.get_coefs(::UnivariateDistribution, ::Int)\nMvSim.Gn0d(::Int, A, B, α, β, σAσB_inv)\nMvSim.Gn0m(::Int, A, α, dB, σAσB_inv)\nMvSim.ρz_bounds(::UnivariateDistribution, ::UnivariateDistribution; ::Int=3)\nMvSim.solvePoly_pmOne(coef)","category":"page"},{"location":"main_functions/#MvSim.get_coefs-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Int64}","page":"Main Functions","title":"MvSim.get_coefs","text":"get_coefs(margin::UnivariateDistribution, n::Int)\n\nGet the n^th degree Hermite Polynomial expansion coefficients for F^-1Φ() where F^-1 is the inverse CDF of a probability distribution and Φ(⋅) is the CDF of a standard normal distribution.\n\nNotes\n\nThe paper describes using Guass-Hermite quadrature using the Probabilists' version of the Hermite polynomials, while the package FastGaussQuadrature.jl uses the Physicists' version. Because of this, we need to do a rescaling of the input and the output:\n\nfrac1ksum_s=1^mw_s H_k (t_s) F_i^-1leftPhi(t_s)right \nfrac1sqrtpi cdot ksum_s=1^mw_s H_k (t_ssqrt2) F_i^-1leftPhi(t_s)right\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.Gn0d-Tuple{Int64,Any,Any,Any,Any,Any}","page":"Main Functions","title":"MvSim.Gn0d","text":"Gn0d(::Int, A, B, α, β, σAσB_inv)\n\nCalculate the n^th derivative of G at 0 where ρ_x = G(ρ_z)\n\nWe are essentially calculating a double integral over a rectangular region\n\nint_α_r-1^α_r int_β_s-1^β_s Φ(z_i z_j ρ_z) dz_i dz_j\n\n(α[r], β[s+1]) +----------+ (α[r+1], β[s+1])\n               |          |\n               |          |\n               |          |\n  (α[r], β[s]) +----------+ (α[r+1], β[s])\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.Gn0m-Tuple{Int64,Any,Any,Any,Any}","page":"Main Functions","title":"MvSim.Gn0m","text":"Gn0m(::Int, A, α, dB, σAσB_inv)\n\nCalculate the n^th derivative of G at 0 where ρ_x = G(ρ_z)\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.ρz_bounds-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Distribution{Univariate,S} where S<:ValueSupport}","page":"Main Functions","title":"MvSim.ρz_bounds","text":"ρz_bounds(::UnivariateDistribution, ::UnivariateDistribution; ::Int=3)\n\nCompute the lower and upper bounds of possible correlations for a pair of univariate distributions. The value n determines the accuracy of the approximation of the two distributions.\n\n\n\n\n\n","category":"method"},{"location":"main_functions/#MvSim.solvePoly_pmOne-Tuple{Any}","page":"Main Functions","title":"MvSim.solvePoly_pmOne","text":"solvePoly_pmOne(coef)\n\nSolve a polynomial equation on the interval [-1, 1].\n\n\n\n\n\n","category":"method"}]
}
